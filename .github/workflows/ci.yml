name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter @campaign/api exec prisma generate

      - name: Build shared package
        run: pnpm --filter @campaign/shared build

      - name: Run linters
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format:check

      - name: Type check
        run: pnpm run type-check

  test-backend:
    name: Backend Tests (API, Rules Engine, Scheduler)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:16-3.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: campaign_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/campaign_test?schema=public
      REDIS_HOST: localhost
      REDIS_PORT: 6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter @campaign/api exec prisma generate

      - name: Build shared package
        run: pnpm --filter @campaign/shared build

      - name: Run database migrations
        run: pnpm --filter @campaign/api exec prisma migrate deploy

      - name: Run backend tests
        run: |
          pnpm --filter @campaign/api test
          pnpm --filter @campaign/rules-engine test
          pnpm --filter @campaign/scheduler test
          pnpm --filter @campaign/shared test

  test-frontend:
    name: Frontend Tests (All)
    runs-on: ubuntu-latest

    env:
      VITE_ENVIRONMENT: test
      VITE_API_URL: http://localhost:9264/graphql
      VITE_API_WS_URL: ws://localhost:9264/graphql
      VITE_APP_NAME: Campaign Manager

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared package
        run: pnpm --filter @campaign/shared build

      - name: Run all frontend tests
        run: pnpm --filter @campaign/frontend test

  performance:
    name: Performance Regression Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:16-3.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: campaign_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/campaign_test?schema=public
      REDIS_HOST: localhost
      REDIS_PORT: 6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter @campaign/api exec prisma generate

      - name: Build shared package
        run: pnpm --filter @campaign/shared build

      - name: Run database migrations
        run: pnpm --filter @campaign/api exec prisma migrate deploy

      - name: Run performance benchmarks
        run: pnpm --filter @campaign/rules-engine test performance.test.ts

      - name: Performance summary
        if: always()
        run: |
          echo "âœ… Performance regression tests completed"
          echo "See test output above for detailed performance metrics"
          echo "Acceptance criteria verified:"
          echo "  - Single evaluation p95 < 50ms"
          echo "  - Cached evaluation p95 < 5ms"
          echo "  - Concurrent requests: 100+ supported"

  build:
    name: Build All Packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter @campaign/api exec prisma generate

      - name: Build shared package first
        run: pnpm --filter @campaign/shared build

      - name: Build remaining packages
        run: pnpm run build
