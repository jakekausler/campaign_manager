/**
 * Mock data for tests
 *
 * Provides realistic test data for Settlement, Structure, Event, and Encounter entities.
 */

export const mockEvents = [
  {
    id: 'event-1',
    campaignId: 'campaign-1',
    locationId: 'location-1',
    name: 'Royal Festival',
    description: 'Annual celebration in Ironhold',
    eventType: 'kingdom',
    scheduledAt: '2024-06-15T12:00:00.000Z',
    occurredAt: '2024-06-15T14:00:00.000Z',
    isCompleted: true,
    variables: { attendance: 500, satisfaction: 0.85 },
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-06-15T14:00:00.000Z',
    deletedAt: null,
    archivedAt: null,
  },
  {
    id: 'event-2',
    campaignId: 'campaign-1',
    locationId: 'location-2',
    name: 'Harvest Moon',
    description: 'Scheduled harvest celebration',
    eventType: 'world',
    scheduledAt: '2024-08-20T18:00:00.000Z',
    occurredAt: null,
    isCompleted: false,
    variables: {},
    createdAt: '2024-01-02T00:00:00.000Z',
    updatedAt: '2024-01-02T00:00:00.000Z',
    deletedAt: null,
    archivedAt: null,
  },
  {
    id: 'event-3',
    campaignId: 'campaign-1',
    locationId: null,
    name: "Hero's Quest",
    description: 'Party main quest event',
    eventType: 'party',
    scheduledAt: '2024-03-01T10:00:00.000Z',
    occurredAt: null,
    isCompleted: false,
    variables: { questProgress: 0.65 },
    createdAt: '2024-01-03T00:00:00.000Z',
    updatedAt: '2024-03-01T10:00:00.000Z',
    deletedAt: null,
    archivedAt: null,
  },
  {
    id: 'event-4',
    campaignId: 'campaign-2',
    locationId: 'location-3',
    name: 'Storm Warning',
    description: 'Approaching storm event',
    eventType: 'story',
    scheduledAt: '2024-12-01T00:00:00.000Z',
    occurredAt: null,
    isCompleted: false,
    variables: { severity: 7 },
    createdAt: '2024-01-04T00:00:00.000Z',
    updatedAt: '2024-01-04T00:00:00.000Z',
    deletedAt: null,
    archivedAt: null,
  },
];

export const mockEncounters = [
  {
    id: 'encounter-1',
    campaignId: 'campaign-1',
    locationId: 'location-1',
    name: 'Dragon Attack',
    description: 'Ancient dragon attacked the settlement',
    difficulty: 15,
    isResolved: true,
    resolvedAt: '2024-05-10T16:30:00.000Z',
    variables: { casualties: 12, goldLost: 5000 },
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-05-10T16:30:00.000Z',
    deletedAt: null,
    archivedAt: null,
  },
  {
    id: 'encounter-2',
    campaignId: 'campaign-1',
    locationId: 'location-2',
    name: 'Dragon Sighting',
    description: 'Ancient dragon spotted in the mountains',
    difficulty: 15,
    isResolved: false,
    resolvedAt: null,
    variables: { threatLevel: 'high' },
    createdAt: '2024-01-02T00:00:00.000Z',
    updatedAt: '2024-01-02T00:00:00.000Z',
    deletedAt: null,
    archivedAt: null,
  },
  {
    id: 'encounter-3',
    campaignId: 'campaign-1',
    locationId: null,
    name: 'Mysterious Stranger',
    description: 'Cloaked figure in the tavern',
    difficulty: 3,
    isResolved: false,
    resolvedAt: null,
    variables: { suspicious: true },
    createdAt: '2024-01-03T00:00:00.000Z',
    updatedAt: '2024-01-03T00:00:00.000Z',
    deletedAt: null,
    archivedAt: null,
  },
  {
    id: 'encounter-4',
    campaignId: 'campaign-2',
    locationId: 'location-3',
    name: 'Storm Elemental',
    description: 'Elemental manifestation of the storm',
    difficulty: 12,
    isResolved: false,
    resolvedAt: null,
    variables: { elementalType: 'storm' },
    createdAt: '2024-01-04T00:00:00.000Z',
    updatedAt: '2024-01-04T00:00:00.000Z',
    deletedAt: null,
    archivedAt: null,
  },
];

export const mockSettlements = [
  {
    id: 'settlement-1',
    kingdomId: 'kingdom-1',
    locationId: 'location-1',
    campaignId: 'campaign-1',
    ownerId: 'user-1',
    name: 'Ironhold',
    level: 3,
    x: 100,
    y: 150,
    z: 0,
    isArchived: false,
    archivedAt: null,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    deletedAt: null,
    version: 1,
    computedFields: {
      population: 1500,
      defense: 25,
    },
    variables: {
      prosperity: 75,
      morale: 80,
      has_walls: true,
    },
  },
  {
    id: 'settlement-2',
    kingdomId: 'kingdom-1',
    locationId: 'location-2',
    campaignId: 'campaign-1',
    ownerId: 'user-1',
    name: 'Silverkeep',
    level: 2,
    x: 200,
    y: 250,
    z: 0,
    isArchived: false,
    archivedAt: null,
    createdAt: '2024-01-02T00:00:00.000Z',
    updatedAt: '2024-01-02T00:00:00.000Z',
    deletedAt: null,
    version: 1,
    computedFields: {
      population: 800,
      defense: 15,
    },
  },
  {
    id: 'settlement-3',
    kingdomId: 'kingdom-2',
    locationId: 'location-3',
    campaignId: 'campaign-2',
    ownerId: 'user-2',
    name: 'Stormwatch',
    level: 4,
    x: 300,
    y: 350,
    z: 0,
    isArchived: false,
    archivedAt: null,
    createdAt: '2024-01-03T00:00:00.000Z',
    updatedAt: '2024-01-03T00:00:00.000Z',
    deletedAt: null,
    version: 1,
    computedFields: {
      population: 2500,
      defense: 40,
    },
  },
  {
    id: 'settlement-empty',
    kingdomId: 'kingdom-1',
    locationId: 'location-1',
    campaignId: 'campaign-1',
    ownerId: 'user-1',
    name: 'Empty Settlement',
    level: 1,
    x: 50,
    y: 50,
    z: 0,
    isArchived: false,
    archivedAt: null,
    createdAt: '2024-01-04T00:00:00.000Z',
    updatedAt: '2024-01-04T00:00:00.000Z',
    deletedAt: null,
    version: 1,
    computedFields: {},
    variables: {},
  },
  {
    id: 'settlement-error-structures',
    kingdomId: 'kingdom-1',
    locationId: 'location-1',
    campaignId: 'campaign-1',
    ownerId: 'user-1',
    name: 'Error Settlement',
    level: 1,
    x: 60,
    y: 60,
    z: 0,
    isArchived: false,
    archivedAt: null,
    createdAt: '2024-01-05T00:00:00.000Z',
    updatedAt: '2024-01-05T00:00:00.000Z',
    deletedAt: null,
    version: 1,
    computedFields: {},
    variables: {},
  },
];

export const mockStructures = [
  {
    id: 'structure-1',
    settlementId: 'settlement-1',
    typeId: 'barracks',
    type: 'barracks',
    name: 'Main Barracks',
    level: 1,
    x: 10,
    y: 20,
    orientation: 0,
    isArchived: false,
    archivedAt: null,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    deletedAt: null,
    version: 1,
    computedFields: {
      capacity: 100,
      training_speed: 1.2,
    },
    variables: {
      garrison_size: 50,
      is_upgraded: false,
      maintenance_cost: 25,
    },
  },
  {
    id: 'structure-2',
    settlementId: 'settlement-1',
    typeId: 'marketplace',
    type: 'marketplace',
    name: 'Central Market',
    level: 2,
    x: 30,
    y: 40,
    orientation: 90,
    isArchived: false,
    archivedAt: null,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    deletedAt: null,
    version: 1,
    computedFields: {
      trade_bonus: 0.15,
      capacity: 50,
    },
  },
  {
    id: 'structure-3',
    settlementId: 'settlement-2',
    typeId: 'temple',
    type: 'temple',
    name: 'Temple of Light',
    level: 1,
    x: 15,
    y: 25,
    orientation: 180,
    isArchived: false,
    archivedAt: null,
    createdAt: '2024-01-02T00:00:00.000Z',
    updatedAt: '2024-01-02T00:00:00.000Z',
    deletedAt: null,
    version: 1,
    computedFields: {
      faith: 50,
      healing_rate: 0.1,
    },
  },
];

/**
 * Mock dependency graph data
 *
 * Realistic test data representing a dependency graph with variables,
 * conditions, effects, and entities with various relationship types.
 */
export const mockDependencyGraph = {
  nodes: [
    {
      id: 'VARIABLE:var-population',
      type: 'VARIABLE' as const,
      entityId: 'var-population',
      label: 'settlement.population',
      metadata: {
        entityType: 'Settlement',
        fieldName: 'population',
      },
    },
    {
      id: 'VARIABLE:var-defense',
      type: 'VARIABLE' as const,
      entityId: 'var-defense',
      label: 'settlement.defense',
      metadata: {
        entityType: 'Settlement',
        fieldName: 'defense',
      },
    },
    {
      id: 'CONDITION:cond-is-large',
      type: 'CONDITION' as const,
      entityId: 'cond-is-large',
      label: 'Is Large Settlement',
      metadata: {
        expression: { '>': [{ var: 'settlement.population' }, 1000] },
        priority: 10,
      },
    },
    {
      id: 'CONDITION:cond-is-fortified',
      type: 'CONDITION' as const,
      entityId: 'cond-is-fortified',
      label: 'Is Fortified',
      metadata: {
        expression: { '>': [{ var: 'settlement.defense' }, 20] },
        priority: 5,
      },
    },
    {
      id: 'EFFECT:effect-boost-population',
      type: 'EFFECT' as const,
      entityId: 'effect-boost-population',
      label: 'Boost Population',
      metadata: {
        phase: 'ON_RESOLVE',
        operations: [
          {
            op: 'add',
            path: '/computedFields/population',
            value: 100,
          },
        ],
      },
    },
    {
      id: 'EFFECT:effect-boost-defense',
      type: 'EFFECT' as const,
      entityId: 'effect-boost-defense',
      label: 'Boost Defense',
      metadata: {
        phase: 'ON_RESOLVE',
        operations: [
          {
            op: 'add',
            path: '/computedFields/defense',
            value: 5,
          },
        ],
      },
    },
    {
      id: 'ENTITY:settlement-1',
      type: 'ENTITY' as const,
      entityId: 'settlement-1',
      label: 'Ironhold',
      metadata: {
        entityType: 'Settlement',
        name: 'Ironhold',
      },
    },
  ],
  edges: [
    {
      fromId: 'CONDITION:cond-is-large',
      toId: 'VARIABLE:var-population',
      type: 'READS' as const,
      metadata: {
        fieldPath: 'settlement.population',
      },
    },
    {
      fromId: 'CONDITION:cond-is-fortified',
      toId: 'VARIABLE:var-defense',
      type: 'READS' as const,
      metadata: {
        fieldPath: 'settlement.defense',
      },
    },
    {
      fromId: 'EFFECT:effect-boost-population',
      toId: 'VARIABLE:var-population',
      type: 'WRITES' as const,
      metadata: {
        operation: 'add',
        path: '/computedFields/population',
      },
    },
    {
      fromId: 'EFFECT:effect-boost-defense',
      toId: 'VARIABLE:var-defense',
      type: 'WRITES' as const,
      metadata: {
        operation: 'add',
        path: '/computedFields/defense',
      },
    },
    {
      fromId: 'EFFECT:effect-boost-defense',
      toId: 'CONDITION:cond-is-fortified',
      type: 'DEPENDS_ON' as const,
      metadata: {
        description: 'Effect depends on condition evaluation',
      },
    },
    {
      fromId: 'ENTITY:settlement-1',
      toId: 'VARIABLE:var-population',
      type: 'DEPENDS_ON' as const,
      metadata: {
        description: 'Entity has variable field',
      },
    },
    {
      fromId: 'ENTITY:settlement-1',
      toId: 'VARIABLE:var-defense',
      type: 'DEPENDS_ON' as const,
      metadata: {
        description: 'Entity has variable field',
      },
    },
  ],
  stats: {
    nodeCount: 7,
    edgeCount: 7,
    variableCount: 2,
    conditionCount: 2,
    effectCount: 2,
    entityCount: 1,
  },
  campaignId: 'campaign-1',
  branchId: 'main',
  builtAt: '2024-01-01T00:00:00.000Z',
};

export const mockConditions = [
  {
    id: 'condition-1',
    entityType: 'Settlement',
    entityId: 'settlement-1',
    field: 'is_trade_hub',
    expression: { '>=': [{ var: 'level' }, 3] },
    description: 'Applies when settlement level is 3 or higher',
    isActive: true,
    priority: 10,
    version: 1,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    deletedAt: null,
    createdBy: 'user-1',
    updatedBy: null,
  },
  {
    id: 'condition-2',
    entityType: 'Settlement',
    entityId: 'settlement-1',
    field: 'is_fortified',
    expression: { '>=': [{ var: 'defense' }, 30] },
    description: 'Applies when defense is 30 or higher',
    isActive: true,
    priority: 20,
    version: 1,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    deletedAt: null,
    createdBy: 'user-1',
    updatedBy: null,
  },
  {
    id: 'condition-3',
    entityType: 'Structure',
    entityId: 'structure-1',
    field: 'is_operational',
    expression: { '>=': [{ var: 'level' }, 1] },
    description: 'Applies when structure level is 1 or higher',
    isActive: true,
    priority: 5,
    version: 1,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    deletedAt: null,
    createdBy: 'user-1',
    updatedBy: null,
  },
  {
    id: 'condition-4',
    entityType: 'Settlement',
    entityId: null, // Type-level condition
    field: 'exists',
    expression: { '>': [{ var: 'level' }, 0] },
    description: 'Type-level: settlement exists if level is greater than 0',
    isActive: true,
    priority: 1,
    version: 1,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    deletedAt: null,
    createdBy: 'user-1',
    updatedBy: null,
  },
];

export const mockEffects = [
  {
    id: 'effect-1',
    name: 'Boost Population',
    description: 'Increases settlement population by 100',
    effectType: 'patch',
    payload: [
      {
        op: 'add',
        path: '/variables/population',
        value: 100,
      },
    ],
    entityType: 'Event',
    entityId: 'event-1',
    timing: 'ON_RESOLVE',
    priority: 10,
    isActive: true,
    version: 1,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    deletedAt: null,
    executions: [
      {
        id: 'execution-1',
        effectId: 'effect-1',
        executedAt: '2024-06-15T14:00:00.000Z',
        status: 'SUCCESS',
        patchApplied: [
          {
            op: 'add',
            path: '/variables/population',
            value: 100,
          },
        ],
        error: null,
      },
    ],
  },
  {
    id: 'effect-2',
    name: 'Boost Defense',
    description: 'Increases settlement defense by 10',
    effectType: 'patch',
    payload: [
      {
        op: 'add',
        path: '/variables/defense',
        value: 10,
      },
    ],
    entityType: 'Event',
    entityId: 'event-1',
    timing: 'ON_RESOLVE',
    priority: 20,
    isActive: true,
    version: 1,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    deletedAt: null,
    executions: [],
  },
  {
    id: 'effect-3',
    name: 'Damage Settlement',
    description: 'Reduces settlement population due to dragon attack',
    effectType: 'patch',
    payload: [
      {
        op: 'add',
        path: '/variables/population',
        value: -50,
      },
    ],
    entityType: 'Encounter',
    entityId: 'encounter-1',
    timing: 'ON_RESOLVE',
    priority: 5,
    isActive: true,
    version: 1,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    deletedAt: null,
    executions: [
      {
        id: 'execution-2',
        effectId: 'effect-3',
        executedAt: '2024-05-10T16:30:00.000Z',
        status: 'SUCCESS',
        patchApplied: [
          {
            op: 'add',
            path: '/variables/population',
            value: -50,
          },
        ],
        error: null,
      },
    ],
  },
  {
    id: 'effect-4',
    name: 'Pre-encounter Warning',
    description: 'Sends warning before encounter',
    effectType: 'patch',
    payload: [
      {
        op: 'add',
        path: '/variables/alert_level',
        value: 'high',
      },
    ],
    entityType: 'Encounter',
    entityId: 'encounter-2',
    timing: 'PRE',
    priority: 1,
    isActive: true,
    version: 1,
    createdAt: '2024-01-01T00:00:00.000Z',
    updatedAt: '2024-01-01T00:00:00.000Z',
    deletedAt: null,
    executions: [],
  },
];
